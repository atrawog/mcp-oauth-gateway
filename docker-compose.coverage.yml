# Sacred Coverage Overlay - Production coverage without contamination!
# This overlay adds coverage tracking to production containers

services:
  auth:
    # Run as root for coverage data writing
    user: root
    environment:
      - PYTHONPATH=/coverage-spy:${PYTHONPATH:-}
      - COVERAGE_PROCESS_START=/coverage-config/.coveragerc
      - COVERAGE_FILE=/coverage-data/.coverage
    volumes:
      - ./coverage-spy:/coverage-spy:ro
      - ./coverage-spy/.coveragerc:/coverage-config/.coveragerc:ro
      - coverage-data:/coverage-data:rw
    # Ensure graceful shutdown for coverage collection
    stop_grace_period: 10s

  # Coverage harvester - collects and combines coverage data
  coverage-harvester:
    image: python:3.11-slim
    container_name: coverage-harvester
    networks:
      - public
    volumes:
      - ./auth:/app:ro  # CRITICAL: Mount source for path alignment!
      - coverage-data:/coverage-data:rw
      - ./htmlcov:/htmlcov:rw
      - ./coverage-spy/.coveragerc:/.coveragerc:ro
      - ./scripts:/scripts:ro
    working_dir: /
    environment:
      - COVERAGE_FILE=/coverage-data/.coverage
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        pip install coverage
        echo 'Coverage harvester started'
        
        # Wait for coverage data to be written
        python /scripts/wait_for_coverage.py
        
        # Combine and generate reports
        cd /coverage-data
        coverage combine || echo 'No data to combine'
        coverage report --rcfile=/.coveragerc || echo 'No data to report'
        coverage html --rcfile=/.coveragerc -d /htmlcov || echo 'No HTML report generated'
        
        echo 'Coverage harvester completed'
        # Keep container alive briefly to allow log collection
        sleep 5
    depends_on:
      - auth

volumes:
  coverage-data:
    external: true

networks:
  public:
    external: true