# Sacred Coverage Overlay - Production coverage without contamination!
# This overlay adds coverage tracking to production containers

services:
  auth:
    # Run as root for coverage data writing
    user: root
    environment:
      # Include all the required environment variables from base compose
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - JWT_SECRET=${GATEWAY_JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_PRIVATE_KEY_B64=${JWT_PRIVATE_KEY_B64}
      - BASE_DOMAIN=${BASE_DOMAIN}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ACCESS_TOKEN_LIFETIME=${ACCESS_TOKEN_LIFETIME}
      - REFRESH_TOKEN_LIFETIME=${REFRESH_TOKEN_LIFETIME}
      - SESSION_TIMEOUT=${SESSION_TIMEOUT}
      - CLIENT_LIFETIME=${CLIENT_LIFETIME}
      - ALLOWED_GITHUB_USERS=${ALLOWED_GITHUB_USERS}
      - MCP_PROTOCOL_VERSION=${MCP_PROTOCOL_VERSION}
      - MCP_CORS_ORIGINS=${MCP_CORS_ORIGINS}
      # Add coverage-specific environment variables - EXACTLY AS CLAUDE.MD COMMANDS!
      - PYTHONPATH=/coverage-spy:/app:${PYTHONPATH:-}
      - COVERAGE_PROCESS_START=/coverage-config/.coveragerc
      - COVERAGE_FILE=/coverage-data/.coverage
    volumes:
      - ./coverage-spy:/coverage-spy:ro
      - ./coverage-spy/.coveragerc:/coverage-config/.coveragerc:ro
      - coverage-data:/coverage-data:rw
    # Ensure graceful shutdown for coverage collection
    stop_grace_period: 10s

  # Coverage harvester - collects and combines coverage data
  coverage-harvester:
    image: python:3.11-slim
    container_name: coverage-harvester
    networks:
      - public
    volumes:
      - ./mcp-oauth-dynamicclient/src/mcp_oauth_dynamicclient:/app:ro  # For path mapping
      - coverage-data:/coverage-data:rw
      - ./htmlcov:/htmlcov:rw
      - ./coverage-spy/.coveragerc:/.coveragerc:ro
      - ./scripts:/scripts:ro
      - .:/workspace:ro
    working_dir: /workspace
    environment:
      - COVERAGE_FILE=/coverage-data/.coverage
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        pip install coverage
        echo 'Coverage harvester started'
        
        # Wait for coverage data to be written
        python /scripts/wait_for_coverage.py
        
        # Copy and process coverage data
        cd /workspace
        if [ -f /coverage-data/.coverage ]; then
            cp /coverage-data/.coverage* . 2>/dev/null || true
            
            # Combine coverage data
            pixi run coverage combine || true
            
            # Generate report
            pixi run coverage report || true
            
            # Generate HTML report
            pixi run coverage html || true
            
            echo "✅ Coverage report generated"
        else
            echo "❌ No coverage data found"
        fi
        
        echo 'Coverage harvester completed'
        # Keep container alive briefly to allow log collection
        sleep 5
    depends_on:
      - auth

volumes:
  coverage-data:
    external: true

networks:
  public:
    external: true