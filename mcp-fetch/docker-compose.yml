services:
  mcp-fetch:
    build:
      context: ../
      dockerfile: mcp-fetch/Dockerfile
    container_name: mcp-fetch
    restart: unless-stopped
    networks:
      - public
    environment:
      - MCP_CORS_ORIGINS=${MCP_CORS_ORIGINS}
      - MCP_PROTOCOL_VERSION=${MCP_PROTOCOL_VERSION}
    labels:
      - "traefik.enable=true"
      # Health check route - Priority 3 (HIGHEST for specific path)
      - "traefik.http.routers.mcp-fetch-health.rule=Host(`mcp-fetch.${BASE_DOMAIN}`) && Path(`/health`)"
      - "traefik.http.routers.mcp-fetch-health.priority=3"
      - "traefik.http.routers.mcp-fetch-health.entrypoints=websecure"
      - "traefik.http.routers.mcp-fetch-health.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-fetch-health.service=mcp-fetch"
      - "traefik.http.services.mcp-fetch.loadbalancer.server.port=3000"
      
      # OAuth discovery route - Priority 10 (ABSOLUTE HIGHEST - must work without auth!)
      - "traefik.http.routers.mcp-fetch-oauth-discovery.rule=Host(`mcp-fetch.${BASE_DOMAIN}`) && PathPrefix(`/.well-known/oauth-authorization-server`)"
      - "traefik.http.routers.mcp-fetch-oauth-discovery.priority=10"
      - "traefik.http.routers.mcp-fetch-oauth-discovery.entrypoints=websecure"
      - "traefik.http.routers.mcp-fetch-oauth-discovery.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-fetch-oauth-discovery.middlewares=oauth-discovery-rewrite@docker"
      - "traefik.http.routers.mcp-fetch-oauth-discovery.service=auth@docker"
      # No auth middleware - OAuth discovery must be public!
      
      # Middleware to rewrite host header for auth service
      - "traefik.http.middlewares.oauth-discovery-rewrite.headers.customrequestheaders.Host=auth.${BASE_DOMAIN}"
      
      # CORS preflight route (OPTIONS) - Priority 4 (HIGHEST for OPTIONS)
      - "traefik.http.routers.mcp-fetch-cors.rule=Host(`mcp-fetch.${BASE_DOMAIN}`) && Method(`OPTIONS`)"
      - "traefik.http.routers.mcp-fetch-cors.priority=4"
      - "traefik.http.routers.mcp-fetch-cors.entrypoints=websecure"
      - "traefik.http.routers.mcp-fetch-cors.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-fetch-cors.service=mcp-fetch"
      # No auth middleware for CORS preflight!
      
      # MCP route with auth - Priority 2
      # Use PathPrefix to handle both /mcp and /mcp/
      - "traefik.http.routers.mcp-fetch.rule=Host(`mcp-fetch.${BASE_DOMAIN}`) && PathPrefix(`/mcp`)"
      - "traefik.http.routers.mcp-fetch.priority=2"
      - "traefik.http.routers.mcp-fetch.entrypoints=websecure"
      - "traefik.http.routers.mcp-fetch.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-fetch.middlewares=mcp-auth@docker"
      - "traefik.http.routers.mcp-fetch.service=mcp-fetch"
      
      # Catch-all route with auth - Priority 1 (LOWEST for HTTPS)
      - "traefik.http.routers.mcp-fetch-catchall.rule=Host(`mcp-fetch.${BASE_DOMAIN}`)"
      - "traefik.http.routers.mcp-fetch-catchall.priority=1"
      - "traefik.http.routers.mcp-fetch-catchall.entrypoints=websecure"
      - "traefik.http.routers.mcp-fetch-catchall.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-fetch-catchall.middlewares=mcp-auth@docker"
      - "traefik.http.routers.mcp-fetch-catchall.service=mcp-fetch"
      
      # HTTP to HTTPS redirect for MCP service - Priority 1 (same as catchall but for HTTP)
      - "traefik.http.routers.mcp-fetch-redirect.rule=Host(`mcp-fetch.${BASE_DOMAIN}`)"
      - "traefik.http.routers.mcp-fetch-redirect.entrypoints=web"
      - "traefik.http.routers.mcp-fetch-redirect.middlewares=redirect-to-https"
      - "traefik.http.routers.mcp-fetch-redirect.priority=1"
      - "traefik.http.routers.mcp-fetch-redirect.service=mcp-fetch"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  public:
    external: true