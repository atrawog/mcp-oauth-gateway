services:
  mcp-sequentialthinking:
    build:
      context: ../
      dockerfile: mcp-sequentialthinking/Dockerfile
    container_name: mcp-sequentialthinking
    restart: unless-stopped
    networks:
      - public
    environment:
      - LOG_FILE=/logs/server.log
      - MCP_CORS_ORIGINS=*
      - MCP_PROTOCOL_VERSION=2024-11-05
    volumes:
      - ../logs/mcp-sequentialthinking:/logs
    labels:
      # OAuth Discovery Route - Priority 10 (Highest!)
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-sequentialthinking-oauth-discovery.rule=Host(`sequentialthinking.${BASE_DOMAIN}`) && PathPrefix(`/.well-known/oauth-authorization-server`)"
      - "traefik.http.routers.mcp-sequentialthinking-oauth-discovery.priority=10"
      - "traefik.http.routers.mcp-sequentialthinking-oauth-discovery.service=auth@docker"
      - "traefik.http.routers.mcp-sequentialthinking-oauth-discovery.tls=true"
      - "traefik.http.routers.mcp-sequentialthinking-oauth-discovery.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.mcp-sequentialthinking-oauth-discovery-rewrite.headers.customrequestheaders.Host=auth.${BASE_DOMAIN}"
      - "traefik.http.routers.mcp-sequentialthinking-oauth-discovery.middlewares=mcp-sequentialthinking-oauth-discovery-rewrite"

      # CORS Preflight Route - Priority 6
      - "traefik.http.routers.mcp-sequentialthinking-cors.rule=Host(`sequentialthinking.${BASE_DOMAIN}`) && Method(`OPTIONS`)"
      - "traefik.http.routers.mcp-sequentialthinking-cors.priority=6"
      - "traefik.http.routers.mcp-sequentialthinking-cors.service=mcp-sequentialthinking"
      - "traefik.http.routers.mcp-sequentialthinking-cors.tls=true"
      - "traefik.http.routers.mcp-sequentialthinking-cors.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-sequentialthinking-cors.middlewares=mcp-cors@file"

      # MCP Route with Auth - Priority 2
      - "traefik.http.routers.mcp-sequentialthinking.rule=Host(`sequentialthinking.${BASE_DOMAIN}`) && PathPrefix(`/mcp`)"
      - "traefik.http.routers.mcp-sequentialthinking.priority=2"
      - "traefik.http.routers.mcp-sequentialthinking.service=mcp-sequentialthinking"
      - "traefik.http.routers.mcp-sequentialthinking.tls=true"
      - "traefik.http.routers.mcp-sequentialthinking.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-sequentialthinking.middlewares=mcp-cors@file,mcp-auth@file"

      # Catch-all Route with Auth - Priority 1 (Lowest!)
      - "traefik.http.routers.mcp-sequentialthinking-catchall.rule=Host(`sequentialthinking.${BASE_DOMAIN}`)"
      - "traefik.http.routers.mcp-sequentialthinking-catchall.priority=1"
      - "traefik.http.routers.mcp-sequentialthinking-catchall.service=mcp-sequentialthinking"
      - "traefik.http.routers.mcp-sequentialthinking-catchall.tls=true"
      - "traefik.http.routers.mcp-sequentialthinking-catchall.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-sequentialthinking-catchall.middlewares=mcp-cors@file,mcp-auth@file"

      # Service definition
      - "traefik.http.services.mcp-sequentialthinking.loadbalancer.server.port=3000"

    healthcheck:
      test: ["CMD", "sh", "-c", "curl -s -X POST http://localhost:3000/mcp -H 'Content-Type: application/json' -H 'Accept: application/json, text/event-stream' -d '{\"jsonrpc\":\"2.0\",\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"'$$MCP_PROTOCOL_VERSION'\",\"capabilities\":{},\"clientInfo\":{\"name\":\"healthcheck\",\"version\":\"1.0\"}},\"id\":1}' | grep -q '\"protocolVersion\":\"'$$MCP_PROTOCOL_VERSION'\"'"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s

networks:
  public:
    external: true
