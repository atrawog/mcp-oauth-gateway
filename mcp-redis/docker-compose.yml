services:
  mcp-redis:
    build:
      context: ../
      dockerfile: mcp-redis/Dockerfile
    container_name: mcp-redis
    restart: unless-stopped
    networks:
      - public
    environment:
      - LOG_FILE=/logs/server.log
      - MCP_CORS_ORIGINS=${MCP_CORS_ORIGINS}
      - MCP_PROTOCOL_VERSION=2025-03-26
      - MCP_TRANSPORT=streamable-http
      # Redis connection settings
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_USERNAME=${REDIS_USERNAME:-default}
      - REDIS_PWD=${REDIS_PWD:-}
      - REDIS_SSL=${REDIS_SSL:-false}
    volumes:
      - ../logs/mcp-redis:/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.mcp-redis.loadbalancer.server.port=3000"

      # OAuth discovery route (Priority 10) - Highest priority for discovery endpoint
      - "traefik.http.routers.mcp-redis-oauth-discovery.rule=Host(`redis.${BASE_DOMAIN}`) && PathPrefix(`/.well-known/oauth-authorization-server`)"
      - "traefik.http.routers.mcp-redis-oauth-discovery.entrypoints=websecure"
      - "traefik.http.routers.mcp-redis-oauth-discovery.priority=10"
      - "traefik.http.routers.mcp-redis-oauth-discovery.service=auth@docker"
      - "traefik.http.routers.mcp-redis-oauth-discovery.middlewares=oauth-discovery-rewrite@docker"
      - "traefik.http.routers.mcp-redis-oauth-discovery.tls=true"
      - "traefik.http.routers.mcp-redis-oauth-discovery.tls.certresolver=le"

      # CORS preflight OPTIONS route (Priority 4) - High priority for CORS preflight
      - "traefik.http.routers.mcp-redis-cors.rule=Host(`redis.${BASE_DOMAIN}`) && Method(`OPTIONS`)"
      - "traefik.http.routers.mcp-redis-cors.entrypoints=websecure"
      - "traefik.http.routers.mcp-redis-cors.priority=4"
      - "traefik.http.routers.mcp-redis-cors.service=mcp-redis"
      - "traefik.http.routers.mcp-redis-cors.middlewares=mcp-cors@file"
      - "traefik.http.routers.mcp-redis-cors.tls=true"
      - "traefik.http.routers.mcp-redis-cors.tls.certresolver=le"

      # Main MCP route with auth (Priority 2) - Medium priority for specific path
      - "traefik.http.routers.mcp-redis.rule=Host(`redis.${BASE_DOMAIN}`) && PathPrefix(`/mcp`)"
      - "traefik.http.routers.mcp-redis.entrypoints=websecure"
      - "traefik.http.routers.mcp-redis.priority=2"
      - "traefik.http.routers.mcp-redis.service=mcp-redis"
      - "traefik.http.routers.mcp-redis.middlewares=mcp-cors@file,mcp-auth@file"
      - "traefik.http.routers.mcp-redis.tls=true"
      - "traefik.http.routers.mcp-redis.tls.certresolver=le"

      # Catch-all route (Priority 1) - Lowest priority
      - "traefik.http.routers.mcp-redis-catchall.rule=Host(`redis.${BASE_DOMAIN}`)"
      - "traefik.http.routers.mcp-redis-catchall.entrypoints=websecure"
      - "traefik.http.routers.mcp-redis-catchall.priority=1"
      - "traefik.http.routers.mcp-redis-catchall.service=mcp-redis"
      - "traefik.http.routers.mcp-redis-catchall.middlewares=mcp-cors@file,mcp-auth@file"
      - "traefik.http.routers.mcp-redis-catchall.tls=true"
      - "traefik.http.routers.mcp-redis-catchall.tls.certresolver=le"

      # HTTP to HTTPS redirect (Priority 1)
      - "traefik.http.routers.mcp-redis-http.rule=Host(`redis.${BASE_DOMAIN}`)"
      - "traefik.http.routers.mcp-redis-http.entrypoints=web"
      - "traefik.http.routers.mcp-redis-http.priority=1"
      - "traefik.http.routers.mcp-redis-http.middlewares=redirect-to-https"

    healthcheck:
      test: ["CMD", "sh", "-c", "curl -s -X POST http://localhost:3000/mcp -H 'Content-Type: application/json' -H 'Accept: application/json, text/event-stream' -d '{\"jsonrpc\":\"2.0\",\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"'$$MCP_PROTOCOL_VERSION'\",\"capabilities\":{},\"clientInfo\":{\"name\":\"healthcheck\",\"version\":\"1.0\"}},\"id\":1}' | grep -q '\"protocolVersion\":\"'$$MCP_PROTOCOL_VERSION'\"'"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    depends_on:
      redis:
        condition: service_healthy

networks:
  public:
    external: true
