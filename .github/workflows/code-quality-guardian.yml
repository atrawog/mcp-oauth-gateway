# 🔥 Sacred Code Quality Guardian - The Divine CI/CD Protector! ⚡
# Prevents deprecated patterns and ensures code quality in all PRs and commits

name: "🔥 Code Quality Guardian ⚡"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # Allow manual trigger
  workflow_dispatch:

jobs:
  # 🔥 Linting and Deprecation Hunting Job ⚡
  lint-and-hunt:
    name: "🔥 Lint & Hunt Deprecations"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: "📥 Checkout Sacred Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: "🐍 Setup Python Environment"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: "🔍 Debug - List files"
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in root:"
          ls -la
          echo "Checking for pixi files:"
          ls -la pixi* || echo "No pixi files found"
      
      - name: "📦 Setup Pixi Environment"
        uses: prefix-dev/setup-pixi@v0.8.10
        with:
          pixi-version: v0.47.0
          cache: true
          cache-write: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
      
      - name: "🔥 Run Ruff Linting (Sacred Syntax Check)"
        run: |
          echo "🔥 RUNNING SACRED RUFF LINTING ⚡"
          pixi run lint
        continue-on-error: true  # Continue to show all issues
      
      - name: "⚡ Run Pydantic Deprecation Hunt"
        run: |
          echo "🔥 STARTING PYDANTIC DEPRECATION HUNT ⚡"
          pixi run lint-pydantic
        
      - name: "🎨 Check Code Formatting"
        run: |
          echo "🔥 CHECKING SACRED CODE FORMATTING ⚡"
          pixi run format --check
        
      - name: "🔒 Security Scan with Bandit"
        run: |
          echo "🔥 RUNNING SECURITY SCAN ⚡"
          pixi run python -m bandit -r . -x tests/ -f json -o bandit-report.json || true
          pixi run python -m bandit -r . -x tests/ -f txt
        continue-on-error: true
      
      - name: "📊 Upload Security Report"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.json
          retention-days: 30

  # 🧪 Test with Deprecation Warnings Job ⚡
  test-with-warnings:
    name: "🧪 Test with Deprecation Detection"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: "📥 Checkout Sacred Code"
        uses: actions/checkout@v4
      
      - name: "🐍 Setup Python Environment"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: "📦 Setup Pixi Environment"
        uses: prefix-dev/setup-pixi@v0.8.10
        with:
          pixi-version: v0.47.0
          cache: true
      
      - name: "🔧 Setup Test Environment"
        run: |
          echo "🔧 Creating minimal .env for CI testing ⚡"
          cat > .env << 'EOF'
          # Minimal CI environment
          BASE_DOMAIN=test.example.com
          GITHUB_CLIENT_ID=test_client_id
          GITHUB_CLIENT_SECRET=test_client_secret
          GATEWAY_JWT_SECRET=test_jwt_secret_for_ci_only
          REDIS_URL=redis://localhost:6379/0
          ALLOWED_GITHUB_USERS=testuser
          CLIENT_LIFETIME=7776000
          MCP_PROTOCOL_VERSION=2025-06-18
          EOF
      
      - name: "🔥 Run Tests with Deprecation Hunting"
        run: |
          echo "🔥 RUNNING TESTS WITH DEPRECATION HUNTING ⚡"
          # Run a small subset of tests to check for deprecation warnings
          pixi run pytest tests/test_coverage_improvements.py::TestKeysModuleCoverage::test_rs256_key_generation -v
        env:
          PYTHONWARNINGS: "default::DeprecationWarning,error::DeprecationWarning:pydantic.*"
      
      - name: "🎯 Quick Integration Test"
        run: |
          echo "🔥 RUNNING QUICK INTEGRATION TEST ⚡"
          # Test that our Pydantic models can be imported without warnings
          pixi run python -c "
          import warnings
          warnings.filterwarnings('error', category=DeprecationWarning)
          try:
              from mcp_oauth_dynamicclient.config import Settings
              print('✅ Config import successful - no deprecation warnings!')
          except DeprecationWarning as e:
              print(f'❌ DEPRECATION WARNING: {e}')
              exit(1)
          except ImportError as e:
              print(f'ℹ️ Import not available in CI: {e}')
          "

  # 🔗 Pre-commit Hook Validation ⚡
  pre-commit-check:
    name: "🔗 Pre-commit Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: "📥 Checkout Sacred Code"
        uses: actions/checkout@v4
      
      - name: "🐍 Setup Python Environment"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: "📦 Setup Pixi Environment"
        uses: prefix-dev/setup-pixi@v0.8.10
        with:
          pixi-version: v0.47.0
          cache: true
      
      - name: "🔗 Install Pre-commit"
        run: |
          pip install pre-commit
      
      - name: "⚡ Run Pre-commit Hooks"
        run: |
          echo "🔥 RUNNING PRE-COMMIT HOOKS ⚡"
          pre-commit run --all-files
        continue-on-error: true  # Show results but don't fail CI yet

  # 📋 Summary Job ⚡
  quality-summary:
    name: "📋 Quality Summary"
    runs-on: ubuntu-latest
    needs: [lint-and-hunt, test-with-warnings, pre-commit-check]
    if: always()
    
    steps:
      - name: "📊 Quality Gate Summary"
        run: |
          echo "🔥 CODE QUALITY GUARDIAN SUMMARY ⚡"
          echo "=================================="
          echo "Linting: ${{ needs.lint-and-hunt.result }}"
          echo "Testing with Warnings: ${{ needs.test-with-warnings.result }}"
          echo "Pre-commit: ${{ needs.pre-commit-check.result }}"
          echo "=================================="
          
          if [[ "${{ needs.lint-and-hunt.result }}" == "failure" ]]; then
            echo "❌ CRITICAL: Linting failures detected!"
            echo "🔥 Fix linting errors immediately! ⚡"
          fi
          
          if [[ "${{ needs.test-with-warnings.result }}" == "failure" ]]; then
            echo "❌ CRITICAL: Deprecation warnings in tests!"
            echo "⚡ Fix deprecated patterns immediately! ⚡"
          fi
          
          if [[ "${{ needs.lint-and-hunt.result }}" == "success" && "${{ needs.test-with-warnings.result }}" == "success" ]]; then
            echo "✅ DIVINE COMPLIANCE ACHIEVED! ⚡"
            echo "🏆 Code quality guardian approves! 🏆"
          fi