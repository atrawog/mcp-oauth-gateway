services:
  mcp-echo-stateful:
    build:
      context: ../
      dockerfile: mcp-echo-stateful/Dockerfile
    container_name: mcp-echo-stateful
    restart: unless-stopped
    networks:
      - public
    environment:
      - LOG_FILE=/logs/server.log
      - MCP_ECHO_HOST=0.0.0.0
      - MCP_ECHO_PORT=3000
      - MCP_ECHO_DEBUG=true
      - MCP_SESSION_TIMEOUT=60  # Session timeout for stateful server
      - MCP_PROTOCOL_VERSION=2025-06-18  # This service supports this specific version
      - MCP_PROTOCOL_VERSIONS_SUPPORTED=${MCP_PROTOCOL_VERSIONS_SUPPORTED}
    volumes:
      - ../logs/mcp-echo-stateful:/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.mcp-echo-stateful.loadbalancer.server.port=3000"

      # OAuth discovery route - Priority 10 (ABSOLUTE HIGHEST - must work without auth!)
      # Using Host rule for main domain only
      - "traefik.http.routers.mcp-echo-stateful-oauth-discovery.rule=(Host(`echo-stateful.${BASE_DOMAIN}`) || Host(`echo-stateful0.${BASE_DOMAIN}`) || Host(`echo-stateful1.${BASE_DOMAIN}`) || Host(`echo-stateful2.${BASE_DOMAIN}`) || Host(`echo-stateful3.${BASE_DOMAIN}`) || Host(`echo-stateful4.${BASE_DOMAIN}`) || Host(`echo-stateful5.${BASE_DOMAIN}`) || Host(`echo-stateful6.${BASE_DOMAIN}`) || Host(`echo-stateful7.${BASE_DOMAIN}`) || Host(`echo-stateful8.${BASE_DOMAIN}`) || Host(`echo-stateful9.${BASE_DOMAIN}`)) && PathPrefix(`/.well-known/oauth-authorization-server`)"
      - "traefik.http.routers.mcp-echo-stateful-oauth-discovery.priority=10"
      - "traefik.http.routers.mcp-echo-stateful-oauth-discovery.entrypoints=websecure"
      - "traefik.http.routers.mcp-echo-stateful-oauth-discovery.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-echo-stateful-oauth-discovery.middlewares=oauth-discovery-rewrite@file"
      - "traefik.http.routers.mcp-echo-stateful-oauth-discovery.service=auth"
      # No auth middleware - OAuth discovery must be public!

      # CORS preflight route (OPTIONS) - Priority 4 (HIGHEST for OPTIONS)
      - "traefik.http.routers.mcp-echo-stateful-cors.rule=(Host(`echo-stateful.${BASE_DOMAIN}`) || Host(`echo-stateful0.${BASE_DOMAIN}`) || Host(`echo-stateful1.${BASE_DOMAIN}`) || Host(`echo-stateful2.${BASE_DOMAIN}`) || Host(`echo-stateful3.${BASE_DOMAIN}`) || Host(`echo-stateful4.${BASE_DOMAIN}`) || Host(`echo-stateful5.${BASE_DOMAIN}`) || Host(`echo-stateful6.${BASE_DOMAIN}`) || Host(`echo-stateful7.${BASE_DOMAIN}`) || Host(`echo-stateful8.${BASE_DOMAIN}`) || Host(`echo-stateful9.${BASE_DOMAIN}`)) && Method(`OPTIONS`)"
      - "traefik.http.routers.mcp-echo-stateful-cors.priority=4"
      - "traefik.http.routers.mcp-echo-stateful-cors.entrypoints=websecure"
      - "traefik.http.routers.mcp-echo-stateful-cors.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-echo-stateful-cors.middlewares=mcp-cors@file"
      - "traefik.http.routers.mcp-echo-stateful-cors.service=mcp-echo-stateful"
      # No auth middleware for CORS preflight, but CORS middleware is essential!

      # MCP route with auth - Priority 2
      # Use PathPrefix to handle both /mcp and /mcp/
      - "traefik.http.routers.mcp-echo-stateful.rule=(Host(`echo-stateful.${BASE_DOMAIN}`) || Host(`echo-stateful0.${BASE_DOMAIN}`) || Host(`echo-stateful1.${BASE_DOMAIN}`) || Host(`echo-stateful2.${BASE_DOMAIN}`) || Host(`echo-stateful3.${BASE_DOMAIN}`) || Host(`echo-stateful4.${BASE_DOMAIN}`) || Host(`echo-stateful5.${BASE_DOMAIN}`) || Host(`echo-stateful6.${BASE_DOMAIN}`) || Host(`echo-stateful7.${BASE_DOMAIN}`) || Host(`echo-stateful8.${BASE_DOMAIN}`) || Host(`echo-stateful9.${BASE_DOMAIN}`)) && PathPrefix(`/mcp`)"
      - "traefik.http.routers.mcp-echo-stateful.priority=2"
      - "traefik.http.routers.mcp-echo-stateful.entrypoints=websecure"
      - "traefik.http.routers.mcp-echo-stateful.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-echo-stateful.middlewares=mcp-cors@file,mcp-auth@file"
      - "traefik.http.routers.mcp-echo-stateful.service=mcp-echo-stateful"

      # Catch-all route with auth - Priority 1 (LOWEST for HTTPS)
      - "traefik.http.routers.mcp-echo-stateful-catchall.rule=Host(`echo-stateful.${BASE_DOMAIN}`) || Host(`echo-stateful0.${BASE_DOMAIN}`) || Host(`echo-stateful1.${BASE_DOMAIN}`) || Host(`echo-stateful2.${BASE_DOMAIN}`) || Host(`echo-stateful3.${BASE_DOMAIN}`) || Host(`echo-stateful4.${BASE_DOMAIN}`) || Host(`echo-stateful5.${BASE_DOMAIN}`) || Host(`echo-stateful6.${BASE_DOMAIN}`) || Host(`echo-stateful7.${BASE_DOMAIN}`) || Host(`echo-stateful8.${BASE_DOMAIN}`) || Host(`echo-stateful9.${BASE_DOMAIN}`)"
      - "traefik.http.routers.mcp-echo-stateful-catchall.priority=1"
      - "traefik.http.routers.mcp-echo-stateful-catchall.entrypoints=websecure"
      - "traefik.http.routers.mcp-echo-stateful-catchall.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-echo-stateful-catchall.middlewares=mcp-cors@file,mcp-auth@file"
      - "traefik.http.routers.mcp-echo-stateful-catchall.service=mcp-echo-stateful"

      # HTTP to HTTPS redirect for MCP service - Priority 1 (same as catchall but for HTTP)
      - "traefik.http.routers.mcp-echo-stateful-redirect.rule=Host(`echo-stateful.${BASE_DOMAIN}`) || Host(`echo-stateful0.${BASE_DOMAIN}`) || Host(`echo-stateful1.${BASE_DOMAIN}`) || Host(`echo-stateful2.${BASE_DOMAIN}`) || Host(`echo-stateful3.${BASE_DOMAIN}`) || Host(`echo-stateful4.${BASE_DOMAIN}`) || Host(`echo-stateful5.${BASE_DOMAIN}`) || Host(`echo-stateful6.${BASE_DOMAIN}`) || Host(`echo-stateful7.${BASE_DOMAIN}`) || Host(`echo-stateful8.${BASE_DOMAIN}`) || Host(`echo-stateful9.${BASE_DOMAIN}`)"
      - "traefik.http.routers.mcp-echo-stateful-redirect.entrypoints=web"
      - "traefik.http.routers.mcp-echo-stateful-redirect.middlewares=redirect-to-https@file"
      - "traefik.http.routers.mcp-echo-stateful-redirect.priority=1"
      - "traefik.http.routers.mcp-echo-stateful-redirect.service=mcp-echo-stateful"
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -s -X POST http://localhost:3000/mcp -H 'Content-Type: application/json' -H 'Accept: application/json, text/event-stream' -d \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"initialize\\\",\\\"params\\\":{\\\"protocolVersion\\\":\\\"${MCP_PROTOCOL_VERSION}\\\",\\\"capabilities\\\":{},\\\"clientInfo\\\":{\\\"name\\\":\\\"healthcheck\\\",\\\"version\\\":\\\"1.0\\\"}},\\\"id\\\":1}\" | grep -q \"protocolVersion.*${MCP_PROTOCOL_VERSION}\""]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s

networks:
  public:
    external: true
